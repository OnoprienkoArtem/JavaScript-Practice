// ООП - это методология, которая позволяет представить приложение, в виде совокупности объектов, взаимодействующих 
// друг с другом. Каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.
// В большинстве ОО языках программиррования такие объекты создаются с помощью специальных конструкций,
// называемых КЛАССАМИ (CLASSES).

// Класс - это программный код, который представляет из себя шаблон или заготовку, на основе которой в последствии и 
// будет создан объект. Класс не имеет состояния и не предпологает вызов методов, описанных в классе.

// Объект - структура, которая была создана из класса.

// в JS классов не существует, поэтому все объекты создаются с использованием функций-конструкторов. Такие объекты 
// называются экземплярами класса и используются как составные блоки приложения.

// Объекты создаются из классов, объект хранит состояние, класс только описывает структуру.

// основные понятия ООП
// ИНКАПСУЛЯЦИЯ - каждый объект отвечает за конкретную функциональность.
// НАСЛЕДОВАНИЕ - объекты могут наследовать функциональность других оюъектов.
// ПОЛИМОРФИЗМ - объекты могут предоставлять одинаковый интерфейс и его использование, но внутренняя реализация
// этого интерфейса будет разной.

// в JS используют два принципа: инкапсуляция и наследование.


// ПРОТОТИП ГОТОВОГО ОБЪЕКТА __proto__
// у любого созданного объекта всегда присутствует ссылка на другой объект, который называется прототип.
// Прототип всех объектов является глобальный объект Object.

// __proto__ - является ссылкой на прототип объекта.

// прототипное наследование

let functionality = {
    open: function() {
        console.log(`${this.room} is open.`);
    }
}

let bathRoom = {
    room: 'Bath room'
}

let kitchen = {
    room: 'Kitchen'
}

bathRoom.__proto__ = functionality;
kitchen.__proto__ = functionality;
bathRoom.open(); // Bath room is open.
kitchen.open(); // Kitchen is open.



// Если создать новый массив с помощью конструктора new Array(), то прототипом будет не объект Object, а объект Array.
// Но прототипом самого объекта Array уже будет все тот же объект Object. Такая структура называется цепочкой прототипов.

// суть наследования в JS - поиск по цепочке прототипов до системного прототипа Object.










